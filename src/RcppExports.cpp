// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "PRECAST_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_fixedNumber_neighbors
arma::sp_umat get_fixedNumber_neighbors(const MATTYPE x, int number);
RcppExport SEXP _PRECAST_get_fixedNumber_neighbors(SEXP xSEXP, SEXP numberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MATTYPE >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type number(numberSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fixedNumber_neighbors(x, number));
    return rcpp_result_gen;
END_RCPP
}
// getneighborhood_fast
arma::sp_umat getneighborhood_fast(const MATTYPE x, float radius);
RcppExport SEXP _PRECAST_getneighborhood_fast(SEXP xSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MATTYPE >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(getneighborhood_fast(x, radius));
    return rcpp_result_gen;
END_RCPP
}
// sp_means_Rcpp
arma::vec sp_means_Rcpp(arma::sp_mat sp_data, bool rowMeans);
RcppExport SEXP _PRECAST_sp_means_Rcpp(SEXP sp_dataSEXP, SEXP rowMeansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowMeans(rowMeansSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_means_Rcpp(sp_data, rowMeans));
    return rcpp_result_gen;
END_RCPP
}
// sp_sums_Rcpp
arma::vec sp_sums_Rcpp(arma::sp_mat sp_data, bool rowSums);
RcppExport SEXP _PRECAST_sp_sums_Rcpp(SEXP sp_dataSEXP, SEXP rowSumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type sp_data(sp_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type rowSums(rowSumsSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_sums_Rcpp(sp_data, rowSums));
    return rcpp_result_gen;
END_RCPP
}
// idrsc2Cpp
Rcpp:: List idrsc2Cpp(const Rcpp::List& Xlist, const Rcpp::List& Adjlist, const Rcpp::List& Adjlist_car, const MATTYPE hZ, const arma::imat& ymat, const Rcpp::List& Mu_intList, const Rcpp::List& Sigma_intList, const MATTYPE& W_int, const Rcpp::List& alpha_intList, const float& beta_int, const VECTYPE& beta_grid, const int& maxIter_ICM, const int& maxIter, const float& epsLogLik, const bool& verbose, const bool& homo, const bool& homoClust, const bool& Sigma_diag, const bool& mix_prop_heter, const bool& Sp2, const int maxK, const int minK, const int& coreNum);
RcppExport SEXP _PRECAST_idrsc2Cpp(SEXP XlistSEXP, SEXP AdjlistSEXP, SEXP Adjlist_carSEXP, SEXP hZSEXP, SEXP ymatSEXP, SEXP Mu_intListSEXP, SEXP Sigma_intListSEXP, SEXP W_intSEXP, SEXP alpha_intListSEXP, SEXP beta_intSEXP, SEXP beta_gridSEXP, SEXP maxIter_ICMSEXP, SEXP maxIterSEXP, SEXP epsLogLikSEXP, SEXP verboseSEXP, SEXP homoSEXP, SEXP homoClustSEXP, SEXP Sigma_diagSEXP, SEXP mix_prop_heterSEXP, SEXP Sp2SEXP, SEXP maxKSEXP, SEXP minKSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Adjlist(AdjlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Adjlist_car(Adjlist_carSEXP);
    Rcpp::traits::input_parameter< const MATTYPE >::type hZ(hZSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type ymat(ymatSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Mu_intList(Mu_intListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Sigma_intList(Sigma_intListSEXP);
    Rcpp::traits::input_parameter< const MATTYPE& >::type W_int(W_intSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type alpha_intList(alpha_intListSEXP);
    Rcpp::traits::input_parameter< const float& >::type beta_int(beta_intSEXP);
    Rcpp::traits::input_parameter< const VECTYPE& >::type beta_grid(beta_gridSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter_ICM(maxIter_ICMSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const float& >::type epsLogLik(epsLogLikSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type homo(homoSEXP);
    Rcpp::traits::input_parameter< const bool& >::type homoClust(homoClustSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Sigma_diag(Sigma_diagSEXP);
    Rcpp::traits::input_parameter< const bool& >::type mix_prop_heter(mix_prop_heterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Sp2(Sp2SEXP);
    Rcpp::traits::input_parameter< const int >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< const int >::type minK(minKSEXP);
    Rcpp::traits::input_parameter< const int& >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(idrsc2Cpp(Xlist, Adjlist, Adjlist_car, hZ, ymat, Mu_intList, Sigma_intList, W_int, alpha_intList, beta_int, beta_grid, maxIter_ICM, maxIter, epsLogLik, verbose, homo, homoClust, Sigma_diag, mix_prop_heter, Sp2, maxK, minK, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// calculateWeight
VECTYPE calculateWeight(const MATTYPE& X, const int& nPCs);
RcppExport SEXP _PRECAST_calculateWeight(SEXP XSEXP, SEXP nPCsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MATTYPE& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type nPCs(nPCsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateWeight(X, nPCs));
    return rcpp_result_gen;
END_RCPP
}
// wpcaCpp
Rcpp::List wpcaCpp(const MATTYPE& X, const int& nPCs, const bool& weighted);
RcppExport SEXP _PRECAST_wpcaCpp(SEXP XSEXP, SEXP nPCsSEXP, SEXP weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MATTYPE& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type nPCs(nPCsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type weighted(weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(wpcaCpp(X, nPCs, weighted));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PRECAST_get_fixedNumber_neighbors", (DL_FUNC) &_PRECAST_get_fixedNumber_neighbors, 2},
    {"_PRECAST_getneighborhood_fast", (DL_FUNC) &_PRECAST_getneighborhood_fast, 2},
    {"_PRECAST_sp_means_Rcpp", (DL_FUNC) &_PRECAST_sp_means_Rcpp, 2},
    {"_PRECAST_sp_sums_Rcpp", (DL_FUNC) &_PRECAST_sp_sums_Rcpp, 2},
    {"_PRECAST_idrsc2Cpp", (DL_FUNC) &_PRECAST_idrsc2Cpp, 23},
    {"_PRECAST_calculateWeight", (DL_FUNC) &_PRECAST_calculateWeight, 2},
    {"_PRECAST_wpcaCpp", (DL_FUNC) &_PRECAST_wpcaCpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_PRECAST(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
